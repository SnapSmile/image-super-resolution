# -*- coding: utf-8 -*-
"""Copy of ISR Prediction Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_0pEXvbW1nV0_MHHaT25N0iHG71h8RS

[![Google Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/idealo/image-super-resolution/blob/master/notebooks/ISR_Prediction_Tutorial.ipynb)

# Install ISR
(skip if using local repo)
"""

"""# Predict

Download a sample image

Load the image with PIL
"""

import numpy as np
from PIL import Image

img = Image.open('../testImage.jpeg')
img

"""## Get predictions

### Create the model and run prediction
Create a RRDN or RDN model with the provided pre-trained weights, choose one
"""

# Uncomment if using local repo
import sys
sys.path.append('..')
from ISR.models import RDN, RRDN

# model = RDN(weights='noise-cancel')
# model = RRDN(weights='gans')
model = RDN(weights='psnr-small')
# model = RDN(weights='psnr-large')

"""#### Baseline"""

img.resize(size=(img.size[0]*4, img.size[1]*4), resample=Image.BICUBIC)

"""#### Prediction"""

sr_img = model.predict(np.array(img))
Image.fromarray(sr_img)

"""### Usecase: upscaling noisy images

Compress the image into the jpeg format to introduce compression artefact and lose some information.
"""

img.save('data/input/test_images/compressed.jpeg','JPEG', dpi=[300, 300], quality=50)
compressed_img = Image.open('data/input/test_images/compressed.jpeg')

compressed_img

"""#### Baseline"""

compressed_img.resize(size=(compressed_img.size[0]*2, compressed_img.size[1]*2), resample=Image.BICUBIC)

model = RDN(weights='noise-cancel')
sr_img = model.predict(np.array(compressed_img))
Image.fromarray(sr_img)

"""### Predictor Class
You can also use the predictor class to run the model on entire folders:
"""

#from ISR.predict import Predictor
#!mkdir -p data/output
#predictor = Predictor(input_dir='data/input/test_images/')
#predictor.get_predictions(model=rdn, weights_path='weights/rdn-C6-D20-G64-G064-x2_ArtefactCancelling_epoch219.hdf5')